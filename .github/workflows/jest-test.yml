name: Profile API Test Cases

on:
  push:
    branches: [main, staging]
  pull_request:

jobs:
  run_tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 10.7.1
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - run: pnpm install --frozen-lockfile

      - name: Get deployment URL
        id: url
        uses: actions/github-script@v7
        with:
          script: |
            const isMain = context.ref === 'refs/heads/main';

            for (let i = 0; i < 20; i++) {
              const comments = context.eventName === 'pull_request'
                ? await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                  })
                : await github.rest.repos.listCommentsForCommit({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    commit_sha: context.sha,
                  });

              const cloudflareComment = comments.data.find(c =>
                c.user.login === 'cloudflare-workers-and-pages[bot]'
              );

              const urlMatch = cloudflareComment?.body.match(/https:\/\/[a-zA-Z0-9-]+\.web3bio\.workers\.dev/);
              if (urlMatch) {
                core.setOutput('value', urlMatch[0]);
                core.setOutput('environment', isMain ? 'production' : 'staging');
                core.setOutput('graphql_server', isMain
                  ? 'https://graph.web3.bio/graphql'
                  : 'https://graph-staging.web3.bio/graphql');
                return;
              }

              if (i < 19) await new Promise(r => setTimeout(r, 15000));
            }

            core.setFailed('Deployment URL not found');

      - name: Wait and test
        run: |
          URL="${{ steps.url.outputs.value }}"
          echo "Testing: $URL (ENV: ${{ steps.url.outputs.environment }})"

          for i in $(seq 1 6); do
            if curl -sf --max-time 10 "$URL" > /dev/null 2>&1; then
              echo "Deployment ready, running tests..."
              pnpm test
              exit 0
            fi
            [ $i -lt 6 ] && sleep 15
          done

          echo "Error: Deployment not ready"
          exit 1
        env:
          BASE_URL: ${{ steps.url.outputs.value }}
          ENVIRONMENT: ${{ steps.url.outputs.environment }}
          GRAPHQL_SERVER: ${{ steps.url.outputs.graphql_server }}
          GENERAL_IDENTITY_GRAPH_API_KEY: ${{ secrets.GENERAL_IDENTITY_GRAPH_API_KEY }}
